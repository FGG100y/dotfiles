#------------------
# Ubuntu 20.04-LTS ^^
# Personal Aliases
#-------------------
# last modified: Thu 19 Aug 2021 10:34:28

alias py='python3'
alias ipy='ipython'

# jupyter lab server
# NOTE that the port number is better to keep put
alias jlab='jupyter lab --no-browser --port=8899'

# convert ipynb notebook to restructured format
alias nb2rst='jupyter nbconvert --to rst'

# cookiecutter alias
alias mkccds='cookiecutter -c v1 https://github.com/drivendata/cookiecutter-data-science'

# ----------------
# change dir group
# ----------------
# step back to parent dir
alias ..='cd ..'
# back to the last dir
alias ...='cd ../..'

# -----------------------
# common use sys commands
# -----------------------
# source ***
alias srcsh='source ~/.bashrc'
# wget continue download flags
alias wget='wget -c'
# tree the directory
alias tree2='tree -dL 2'
alias tree3='tree -dL 3'
# In case of careless rm
alias rm='rm -i'
alias mv='mv -i'
alias cpr='cp -r'
# Prevents accidentally clobbering files
alias mkdir='mkdir -p'
alias his='history'
alias which='type -a'
# Makes a more readable output
alias du='du -mh'
alias du9='du -Sh | sort -rh | head -9'
alias df='df -kTh'
# check the cd-alias
alias mycds='cat ~/.bashrc_aliases_local_only | grep cd'

# --------------
# dotfiles group
# --------------
# edit dotfiles
# NOTE this HOME is for vms only, use "diffg LO" when merge remote conflict
alias vimsh='vim $HOME/.bashrc'
alias vimbz='vim $HOME/.bashrc_aliases'
alias vimrc='vim $HOME/.vimrc'
alias vimtx='vim $HOME/.tmux.conf'
alias vimgc='vim $HOME/.gitconfig'
alias vimbl='vim $HOME/.bashrc_aliases_local_only'

# -------------
# tmux commands
# -------------
alias txls='tmux ls'
alias txat='tmux attach -t'
alias txks='tmux kill-session -t'
# alias txns='tmux new-session -s'
# alias txsh='tmux new-session -s shell'

# ------------------
# The 'ls' family :)
# barely changed
# ------------------
# Add colors for filetype and  human-readable sizes by default on 'ls':
alias ls='ls -h --color'
# The ubiquitous 'll': directories first, with alphanumeric sorting:
alias l="ls -lF --group-directories-first"
alias ll="ls -lhv --group-directories-first"
alias lx='ls -lXB'         #  Sort by extension.
alias lk='ls -lSr'         #  Sort by size, biggest last.
alias lt='ls -ltr'         #  Sort by date, most recent last.
alias lc='ls -ltcr'        #  Sort by/show change time,most recent last.
alias llm='ll | more'      #  Pipe through 'more'
alias llr='ll -R'          #  Recursive ls.
alias la='ll -A'           #  Show hidden files.
alias hidden='ls -d .*'    # show dot files only
alias hf="ls -d .* | grep '^\.'"    # exclude directories
alias hd="ls -d .* | grep -v '^\.'" # keep directories only

# --------------
# language group
# --------------
# complier for C++
# -----------------
# alias gpp='g++ -std=c++14 -Wall -Wextra -Werror'
alias gpp='g++ -std=c++11 -Wall -Wextra -Werror'
# alias clang='clang -std=c++11 -stdlib=libc++ -lc++ -lm -Werror -Weverything'
# alias clang='clang -std=c++11 -stdlib=libc++ -lc++ -lm -Werror -Weverything -Wno-c++98-compat-pedantic'

# NOTE: more paras/flags for clang:
# clang -Wno-disabled-macro-expansion -Wno-float-equal -Wno-c++98-compat-pedantic'
#       -Wno-global-constructors -Wno-missing-prototypes -Wno-padded
#       -Wno-old-style-cast 


# ---------------
# handy functions
# ---------------
# Creates an archive (*.tar.gz) from given directory
function mktar() { tar cvzf "${1%%/}.tar.gz" "${1%%/}"; }

# Creates a ZIP archive of file or folder
function mkzip() { zip -r "${1%%/}.zip" "$1" ; }

function extract()      # Handy Extract Program
{
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf "$1"     ;;
            *.tar.xz)    tar xvJf "$1"     ;;
            *.tar.gz)    tar xvzf "$1"     ;;
            *.bz2)       bunzip2 "$1"      ;;
            *.rar)       unrar x "$1"      ;;
            *.gz)        gunzip "$1"       ;;
            *.tar)       tar xvf "$1"      ;;
            *.tbz2)      tar xvjf "$1"     ;;
            *.tgz)       tar xvzf "$1"     ;;
            *.zip)       unzip "$1"        ;;
            *.Z)         uncompress "$1"   ;;
            *.7z)        7z x "$1"         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# ---------
# fzf grops
# ---------
# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir" || exit
}

# ---------
# my funcs
# ---------
# cat *file's contents about some 'key'
Bashalias () {
    cat < ~/.bashrc_aliases | grep "$1"
}
# quick check vimrc key-combinations
Vimalias () {
    cat < ~/.vimrc | grep "$1"
}

# copy .gitignore file to .
Gignore () {
    myfile="$HOME"/gitignore/"$1".gitignore
    if [ -f "$myfile" ]; then
        cp "$myfile" ./.gitignore
    else
        echo "No such file/dir"
    fi
}

# Wed 30 Oct 2019 20:26:53
# Usage: mkgo dir_name
mkgo () {
    mkdir -p "$1"
    cd "$1" || exit
}

# When there is no tree
# Usage: counts_files dir
count_files () {
    num_dir=0
    num_f=0
    if [ -d "$1" ]; then
        for f in "$1"/*; do
            if [ -d "$f" ]; then
                num_dir=$(( num_dir + 1 ))
            elif [ -f "$f" ]; then
                num_f=$(( num_f + 1 ))
            fi
        done
    else
        echo "Bad argument. Must be a directory."
    fi
    echo "Total files: $(( num_dir + num_f ))"
    echo "$num_dir directories, $num_f files"
}

# # get pyproject pkgs from my-huge-py-venv-such-as-'DS'
# pyrequirements () {
#     pypkgs()
#     # list pkg names as pattern used by grep
#     paste -s -d"|" requirements.temp > $1
#     pip freeze | grep -E -f $1 > $2
# }

pypkgs() {
    # get pkgs names
    ag --nonumbers --nofilename 'import ' ./*/*.py 
        \ | awk -F' ' '!/(^# | src.)/{print $2}' 
        \ | awk -F'.' '{print $1}' 
        \ | awk '!seen[$0]++'
        \ > requirements.temp
}
